# Default values for krill.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: apnic/krill
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  # tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

krillConf:
  data_dir: "/var/krill/data"
  log_type: "file"
  log_file: "/dev/stdout"

  # Either provide an auth_token directly to write to a kubernetes secret and be loaded as env var KRILL_AUTH_TOKEN
  auth_token: "secrettoken"
  # or provide the name of an existing secret with `auth_token` key to be read instead.
  existingSecret: ""

  # optional additional krill config to add, see https://github.com/APNIC-net/krill/blob/master/defaults/krill.conf
  extra_args: {}
    # repo_enabled: false
    # log_level: "warn"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podDisruptionBudget:
  enabled: false
  minAvailable: ~
  maxUnavailable: 1

## See `kubectl explain deployment.spec.strategy` for more
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
deploymentStrategy:
  type: RollingUpdate

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 3000

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

## Configure liveness and readiness probe values
## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
livenessProbe:
  enabled: true
  failureThreshold: 3
  initialDelaySeconds: 5
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1

readinessProbe:
  enabled: true
  failureThreshold: 3
  initialDelaySeconds: 5
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1

resources: {}
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#  cpu: 100m
#  memory: 128Mi
# requests:
#  cpu: 100m
#  memory: 128Mi

# Persistent data store for data_dir
persistence:
  enabled: false
  # Existing claim to use
  existingClaim: ""
  # Existing claim's subPath to use, e.g. "data" (optional)
  subPath: ""

  # Persistent Volume Storage Class
  # If defined, storageClassName: <storageClass>
  # If set to "-", storageClassName: "", which disables dynamic provisioning
  # If undefined (the default) or set to null, no storageClassName spec is
  #   set, choosing the default provisioner.  (gp2 on AWS, standard on
  #   GKE, AWS & OpenStack)
  storageClass: ""
  accessMode: ReadWriteOnce
  # Persistant storage size request
  size: 10Gi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Settings for Krill's prometheus metrics
metrics:
  enabled: false
  scrapeInterval: 30s

  # Pod annotations for Prometheus scraping
  podAnnotations: {}
    # prometheus.io/scrape: "true"
    # prometheus.io/port: "8085"
    # prometheus.io/path: "/metrics"

  # Alternatively, a service monitor for Prometheus-Operator can be configured
  serviceMonitor:
    enabled: false
    scheme: https
    path: /metrics
    interval: 30s
    additionalLabels: {}
    # ServiceMonitor TLS Config: https://coreos.com/operators/prometheus/docs/latest/api.html#tlsconfig
    tlsConfig:
      insecureSkipVerify: true

nodeSelector: {}

tolerations: []

affinity: {}
